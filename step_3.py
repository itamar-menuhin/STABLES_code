#!/usr/bin/env python
# coding: utf-8


import time
from Bio.Seq import Seq
from Bio.Data.CodonTable import unambiguous_dna_by_id, unambiguous_dna_by_name

from scipy.spatial import distance

from os import path, chdir

# for linker
from .In.utils import iupred2a_lib

import pandas as pd





def gene_seq_2_aa(gene_seq):
    """helper function.
    The input is a string of ACGT, the output is the translation to amino acid (string format)"""
    gene_seq_aa = Seq(gene_seq)
    gene_seq_aa = gene_seq_aa.translate()
    gene_seq_aa = str (gene_seq_aa)
    return gene_seq_aa



# ### Codon Usage and Amino-Acid Usage profile calculation:



def altcodons(codon, table):
    """List codons that code for the same aminonacid / are also stop. 
    Given a codon, the output is a list of the alternative (synonymous) codons.

    @param codon
    @table code table id (1 is standard)
    @return list of codons

    """
    tab = unambiguous_dna_by_id[table]

    if codon in tab.stop_codons:
        return tab.stop_codons

    try:
        aa = tab.forward_table[codon]
    except:
        return []

    return [k for (k, v) in tab.forward_table.items()
            if v == aa]



def define_table():
    """Define the table that maps each amino acid to its synonymus codons (without stop codons).
    @return a dictionary, where the keys are amino acids and the values are the codons.    
    """
    
    standard_table = unambiguous_dna_by_name["Standard"]
    reverse_genetic_code = standard_table.back_table.copy()

    for aa in reverse_genetic_code.keys():
        curr_amino_acid = aa
        primary_codon = reverse_genetic_code[aa]
        syno_codons = altcodons(primary_codon, 1)
        reverse_genetic_code[curr_amino_acid] = syno_codons

    reverse_genetic_code.pop(None, None)
    return reverse_genetic_code





# ## 3. Find the appropriate linker



#define the function that chooses the best linker according to the user's choise of target gene, essential gene 
#and the weight given to each one of target gene,essential gene and linker's optimization.
def best_fusion_linker(target_gene,host_gene,linkers_path):
    df_linkers = pd.read_csv(linkers_path)

    length_target=len(target_gene)
    length_host=len(host_gene)
    #compute the scores of the target gene and the essential genes before adding a linker between them
    score_target_before=iupred2a_lib.iupred(target_gene) 
    score_host_before=iupred2a_lib.iupred(host_gene)

    df_linkers.loc[:, 'distances_target'] = 0
    df_linkers.loc[:, 'distances_host'] = 0

    num_linkers = df_linkers.shape[0]
    #for each linker, an euclidean distance between the target/essential gene score
    #before the construct building and after is computed.
    for ii, linker_id in enumerate(df_linkers.index):
        if ii%50==0:
            print(f'finished {ii} out of {num_linkers}')
        curr_linker = df_linkers.loc[linker_id, 'sequence']
        construct=target_gene+curr_linker+host_gene #the construct is composed from a target gene - linker - essential gene
        #the score of essential and target genes in the construct is taken from the whole contrust score
        score_construct=iupred2a_lib.iupred(construct)
        score_target_after=score_construct[:length_target]
        score_host_after=score_construct[-length_host:]
        #calculate the euclidean distances for each linker
        df_linkers.loc[linker_id, 'distances_target'] = distance.euclidean(score_target_after,score_target_before)
        df_linkers.loc[linker_id, 'distances_host'] = distance.euclidean(score_host_after,score_host_before)

    df_linkers.loc[:, 'sum_distances'] = df_linkers['distances_target']+df_linkers['distances_host']
    df_linkers.loc[:, 'score'] = df_linkers['sum_distances'] - df_linkers['sum_distances'].min()
    df_linkers.loc[:, 'score'] = df_linkers['score']/df_linkers['score'].max()

    df_linkers = df_linkers.sort_values('sum_distances').head(1)
    df_linkers.loc[:, 'score'] = 1-df_linkers['score']

    df_linkers = df_linkers[['name', 'score', 'sequence']].rename(columns = {'sequence':'linker_AA_sequence', 'name':'linker_name', 'score':'linker_score'})


    return df_linkers



def tai_maximal_codon(list_codons, dict_tai):
    codons_with_scores = [(dict_tai[x], x) for x in list_codons]
    codons_with_scores = sorted(codons_with_scores, reverse=True)
    maximal_codon = codons_with_scores[0][1]

    return maximal_codon


def AA_to_codon_dict(tai_path):

    df_tai = pd.read_csv(tai_path, usecols=['Codon', 'wi'])
    genetic_code = unambiguous_dna_by_id[1].forward_table #keys = codons; values = Amino acids
    df_tai.loc[:, 'AA'] = df_tai.Codon.map(genetic_code)
    df_tai.to_csv(tai_path)

    dict_tai = df_tai[['Codon', 'wi']].set_index('Codon').to_dict()['wi']
    x = {'TGA':'*','TAA':'*','TAG':'*'}
    genetic_code.update(x)
    reverse_genetic_code = define_table()
    new_dict = {x:tai_maximal_codon(reverse_genetic_code[x], dict_tai) for x in reverse_genetic_code.keys()}
    return new_dict


def AA2nt_translate(AA_seq, aa2codon_dict):
    AA_list = list(AA_seq)
    codon_list = [aa2codon_dict[x] for x in AA_list]
    return ''.join(codon_list)

# returns the best linkers



def find_slippage_1(target_seq, linker_seq, host_seq, mode):

    test_seq = target_seq[-3:]+linker_seq+host_seq[:3]
    if mode == 'target':
        test_seq = target_seq
    subseqs = ['AAAA', 'CCCC', 'GGGG', 'TTTT']
    found = []
    for subseq in subseqs:
        if test_seq.find(subseq)>-1:
            found.append(subseq)
    return ','.join(found)


def find_slippage_L(target_seq, linker_seq, host_seq, L, mode):

    border_add = 3*L-1
    test_seq = target_seq[-border_add:]+linker_seq+host_seq[:border_add]
    if mode == 'target':
        test_seq = target_seq
    all_substrings = [test_seq[ii:ii+L] for ii in range(len(test_seq))]
    all_substrings = [x for x in all_substrings if len(x)==L]
    all_substrings = sorted(list(set(all_substrings)))
    subseqs = [x*3 for x in all_substrings]
    found = []
    for subseq in subseqs:
        if test_seq.find(subseq)>-1:
            found.append(subseq)
    return ','.join(found)

def find_recombination(target_seq, linker_seq, host_seq, L, mode):

    border_add = L-1
    test_seq = target_seq[-border_add:]+linker_seq+host_seq[:border_add]
    if mode=='target':
        test_seq = target_seq
    all_substrings = [test_seq[ii:ii+L] for ii in range(len(test_seq))]
    all_substrings = [x for x in all_substrings if len(x)==L]
    subseqs = sorted(list(set(all_substrings)))
    found = []
    if mode == 'linker':
        for subseq in subseqs:
            if (target_seq.find(subseq)>-1):
                found.append(subseq)
            if host_seq.find(subseq)>-1:
                found.append(subseq)
    if mode == 'target':
        for subseq in subseqs:
            if linker_seq.find(subseq)>-1:
                found.append(subseq)
                print(subseq)
                print(target_seq.find(subseq))
                print(linker_seq.find(subseq))

            if host_seq.find(subseq)>-1:
                found.append(subseq)
                print(subseq)
                print(target_seq.find(subseq))
                print(host_seq.find(subseq))
    return ','.join(found)

def find_suspect(target_seq, linker_seq, host_seq, mode = 'linker', max_L=12):

    suspects = []
    suspects.append(find_slippage_1(target_seq, linker_seq, host_seq, mode))
    for L in range(2, max_L):
        suspects.append(find_slippage_L(target_seq, linker_seq, host_seq, L, mode))
    suspects.append(find_recombination(target_seq, linker_seq, host_seq, max_L, mode))
    suspects = [x for x in suspects if x!='']
    suspects = ','.join(suspects)
    return suspects



def step_2(target_seq, host_seq, linkers_path, tai_path, optimize_target):
    print("\n\nStarting step 2")
    print("\n\nFinding the best linkers")
    start = time.time()

    target_seq_aa = gene_seq_2_aa(target_seq)
    target_gene_aa = target_seq_aa.replace("*", "")

    host_seq_aa = gene_seq_2_aa(host_seq)
    host_seq_aa = host_seq_aa.replace("*", "")

    df_linkers = best_fusion_linker(target_gene_aa,host_seq_aa,linkers_path)

    aa2codon_dict = AA_to_codon_dict(tai_path)
    df_linkers.loc[:, 'linker_nt_sequence'] = df_linkers.linker_AA_sequence.apply(lambda x: AA2nt_translate(x, aa2codon_dict))

    df_linkers.loc[:, 'suspects_linker'] = df_linkers.linker_nt_sequence.apply(lambda x: find_suspect(target_seq, x, host_seq, mode = 'linker'))
    df_linkers.loc[:, 'target_nt_seq'] = target_seq
    new_target_seq = target_seq
    if optimize_target:
        df_linkers.loc[:, 'target_nt_seq'] = AA2nt_translate(target_gene_aa, aa2codon_dict)
        new_target_seq = AA2nt_translate(target_gene_aa, aa2codon_dict)


    df_linkers.loc[:, 'host_nt_seq'] = host_seq

    print("Second step time = {}".format(time.time() - start))
    return df_linkers, new_target_seq


def single_calc(target, gene_id_host, host_genes_path, target_seq, path_linkers, tai_path, optimize_target = True):

    df_genome = pd.read_csv(host_genes_path)
    if df_genome.shape[1]==0:
        df_genome = pd.read_csv(host_genes_path, delimiter = '\t')

    host_seq = df_genome[df_genome.gene_id1==gene_id_host][['gene_ORF']].iloc[0 ,0]

    df_linkers, new_target_seq = step_2(target_seq, host_seq, path_linkers, tai_path, optimize_target)
    df_linkers.loc[:, 'host'] = target.split('_')[0]
    df_linkers.loc[:, 'target_gene'] = target.split('_')[1]
    df_linkers.loc[:, 'suspects_target'] = df_linkers.linker_nt_sequence.apply(lambda x: find_suspect(new_target_seq, x, host_seq, mode='target', max_L=15))
    df_linkers.loc[:, 'host_gene_id'] = gene_id_host


    df_linkers_curr = df_linkers[['host', 'target_gene', 'host_gene_id', 'linker_AA_sequence', 'suspects_linker', 'suspects_target', 'target_nt_seq', 'linker_nt_sequence', 'host_nt_seq']]
    print(df_linkers_curr)
    return df_linkers_curr


chdir('/mnt/c/Users/itamar/Desktop/pythonProject_model_improvement')



dict_target_gene = dict()
dict_target_gene['subtilis_TGFB1'] = 'ATGGGCGGAAAACATGATATATCCAGACGTCAATTTTTGAATTATACGCTCACAGGCGTAGGAGGTTTTATGGCGGCTAGTATGCTCATGCCTATGGTTCGCTTCGCACTCGATATGGCACTTGACACGAACTATTGTTTTAGCTCGACTGAGAAGAACTGTTGTGTACGTCAACTGTACATTGATTTCCGTAAAGACCTGGGGTGGAAGTGGATCCACGAGCCCAAGGGCTATCACGCCAACTTCTGTTTGGGACCATGCCCTTATATATGGTCTCTGGACACACAGTACAGCAAAGTTCTGGCACTGTACAATCAGCACAACCCGGGTGCATCTGCGGCTCCGTGTTGCGTCCCTCAGGCTTTAGAACCTTTACCAATTGTATATTATGTAGGACGAAAACCCAAAGTAGAGCAGCTTTCCAACATGATCGTTCGGTCATGTAAGTGTAGTTAG'.upper()
dict_target_gene['kompas_FGF2'] = 'ATGAGATTTCCTTCAATTTTTACTGCTGTTTTATTCGCAGCATCCTCCGCATTAGCTGCTCCAGTCAACACTACAACAGAAGATGAAACGGCACAAATTCCGGCTGAAGCTGTCATCGGTTACTCAGATTTAGAAGGGGATTTCGATGTTGCTGTTTTGCCATTTTCCAACAGCACAAATAACGGGTTATTGTTTATAAATACTACTATTGCCAGCATTGCTGCTAAAGAAGAAGGGGTATCTCTCGAGAAAAGAGAGGCTGAAGCTATGGCTGCAGGTTCTATTACTACATTGCCATCTTTGCCAGAAGATGGTGGATCTGGTGCTTTTCCACCTGGTCATTTTAAAGATCCAAAAAGATTGTATTGTAAAAATGGTGGATTTTTCTTGAGAATTCATCCAGATGGTAGAGTTGATGGTGTTAGAGAAAAATCTGATCCACATATTAAATTGCAATTGCAAGCTGAAGAGAGAGGTGTTGTCTCTATTAAAGGTGTTTGTGCTAATAGATATTTGGCTATGAAAGAAGATGGTAGATTGTTAGCTTCTAAATGTGTTACTGATGAATGTTTTTTCTTCGAAAGATTGGAATCTAATAACTATAATACTTATAGGTCTAGAAAATATTCTTCATGGTATGTTGCTTTGAAAAGAACTGGTCAATATAAATTGGGTCCAAAAACTGGTCCAGGTCAAAAAGCTATTTTGTTTTTGCCAATGTCTGCTAAATCTTGA'.upper()
dict_target_gene['tobacco_SCI'] = "ATGGCAAGAAAGTCCCTCATATTCCCTGTGATACTCCTCGCAGTTTTGTTGTTTAGTCCACCAATCTACTCCGAGCTCCAGTTGAATCTTAAGGTGGAATTTTACAACTCCCAGCCATCTGATACTACAAATTCCATAAACCCTCAATTCAAGGTTACTAATACAGGATCTTCAGCTATCGATCTTTCAAAACTCACTCTTAGATACTACTACACAGTGGATGGTCAAAAGGATCAGACTTTTTGGTGTGACCATGCTGCAATTATAGGATCACAGGGTAGTTACAACGGAATAACTTCAAACGTTAAGGGTACATTCGTGAAAATGAGTTCCTCTACTAATAACGCTGATACATATCTCGAAATTTCTTTTACTGGAGGTACACTTGAGCCAGGTGCTCATGTTCAAATACAGGGAAGGTTCGCAAAAAATGATTGGTCACAGTACACTCAATCCAACGATTACTCTTTTAAGTCAGCTAGTCAATTCGTTGAATGGGATCAGGTGACAGCATATTTGAATGGTGTTTTAGTGTGGGGTAAAGAGCCTGGAGGTTCAGTTGTGCCAAGTACTCAACCTGTTACTACACCACCTGCTACTACAAAGCCACCTGCAACTACAATCCCACCTAGTGGTGCTGGTGGAGGCTCTGGTGGAGGCTCAGGTGGAGGCAGTGCAGGAGGTGGAGAGACCGAGAACCTATATTTTCAAGGTTTCGTGAACCAGCACCTCTGCGGATCTCATCTTGTTGAGGCACTTTACCTTGTGTGCGGAGAGAGGGGATTCTTCTACACTCCAAAGGCTAAGGCTGCTCCAAAGAGGGGTATCGTTGAGCAATGTTGCGCTTCTGTGTGCTCTCTCTACCAGCTTGAGAACTACTGCAACTGA".upper()
dict_target_gene['tobacco_mTF'] = "ATGGCAAGAAAGTCCCTCATATTCCCTGTGATACTCCTCGCAGTTTTGTTGTTTAGTCCACCAATCTACTCCGAGCTCCAGTTGAATCTTAAGGTGGAATTTTACAACTCCCAGCCATCTGATACTACAAATTCCATAAACCCTCAATTCAAGGTTACTAATACAGGATCTTCAGCTATCGATCTTTCAAAACTCACTCTTAGATACTACTACACAGTGGATGGTCAAAAGGATCAGACTTTTTGGTGTGACCATGCTGCAATTATAGGATCACAGGGTAGTTACAACGGAATAACTTCAAACGTTAAGGGTACATTCGTGAAAATGAGTTCCTCTACTAATAACGCTGATACATATCTCGAAATTTCTTTTACTGGAGGTACACTTGAGCCAGGTGCTCATGTTCAAATACAGGGAAGGTTCGCAAAAAATGATTGGTCACAGTACACTCAATCCAACGATTACTCTTTTAAGTCAGCTAGTCAATTCGTTGAATGGGATCAGGTGACAGCATATTTGAATGGTGTTTTAGTGTGGGGTAAAGAGCCTGGAGGTTCAGTTGTGCCAAGTACTCAACCTGTTACTACACCACCTGCTACTACAAAGCCACCTGCAACTACAATCCCACCTAGTGGTGCTGGTGGAGGCTCTGGTGGAGGCTCAGGTGGAGGCAGTGCAGGAGGTGGGGAGAACCTATATTTTCAAGGTGGAGGTGCAGGAGGTGGGGATCCTGAGAGAACTGTTAGGTGGTGCACTATCTCTACCCACGAGGCTAACAAGTGCGCTTCCTTCAGAGAGAACGTCCTCAGGATTCTTGAGTCCGGACCATTCGTGTCCTGCGTGAAGAAAACTTCCCACATGGACTGCATCAAGGCCATCTCAAACAACGAGGCTGATGCTGTGACTCTCGATGGTGGACTTGTTTACGAGGCTGGACTCAAGCCAAACAACCTTAAGCCAGTTGTGGCTGAGTTCCACGGCACTAAGGATAATCCACAGACTCACTACTACGCTGTGGCCGTGGTTAAGAAGGACACTGACTTCAAGCTCAACGAGCTGAGGGGAAAGAAGTCTTGCCATACTGGACTTGGAAGGTCCGCTGGATGGAACATCCCAATGGGAAAGCTCTACAAAGAGCTGCCCGATCCACAAGAGTCTATTCAAAGGGCTGCTGCCAACTTCTTCTCCGCTTCTTGTGTTCCTTGCGCCGACCAAAGCTCATTCCCAAAGTTGTGTCAACTCTGCGCTGGCAAGGGAACTGATAAGTGTGCTTGCTCTAACCACGAGCCATACTTCGGATACTCCGGTGCTTTCAAGTGCCTTATGGAAGGTGCTGGTGATGTGGCTTTCGTGAAGCACTCTACTGTGTTCGACAACCTGCCAAATCCAGAGGACCGTAAGAACTACGAGCTTCTCTGCGGAGACAACACCCGTAAGTCCGTGGATGATTACCAAGAGTGCTACCTCGCTATGGTGCCATCTCATGCTGTTGTGGCTAGAACTGTTGGCGGCAAAGAGGATGTTATCTGGGAGCTTTTGAACCACGCTCAAGAGCACTTCGGCAAGGATAAGCCAGATAACTTCCAGCTGTTCCAGTCTCCACACGGAAAGGACCTCTTGTTCAAGGATTCCGCTGATGGCTTCCTCAAGATCCCCTCCAAGATGGACTTCGAGCTTTACCTCGGATACGAGTACGTTACCGCTCTCCAGAACCTTCGTGAATCCAAGCCACCAGACTCCTCTAAGGATGAGTGCATGGTTAAGTGGTGCGCCATCGGACATCAAGAGCGTACTAAGTGTGATAGGTGGTCCGGATTTTCCGGTGGTGCTATTGAATGTGAGACTGCCGAGAACACCGAAGAGTGCATTGCCAAGATCATGAAGGGCGAAGCTGACGCTATGTCCCTTGATGGTGGATACCTCTACATTGCTGGAAAGTGCGGACTTGTGCCAGTGCTTGCTGAGAACTATAAGACTGAGGGCGAGTCCTGCAAGAACACTCCAGAGAAGGGATACCTTGCAGTCGCCGTTGTTAAGACCTCCGACGCTAACATCAACTGGAACAACCTCAAGGACAAGAAGTCCTGTCACACTGCTGTGGATAGGACTGCCGGTTGGAATATCCCTATGGGCCTTCTCTACTCCAAGATCAACAACTGCAAGTTCGACGAGTTCTTCTCTGCTGGATGTGCTCCAGGATCTCCCAGAAACTCTTCTCTTTGCGCTCTCTGCATCGGCTCCGAAAAAGGTACTGGAAAAGAGTGCGTCCCCAACTCCAATGAGAGGTACTATGGATACACTGGCGCTTTCAGATGCCTCGTCGAAAAGGGTGATGTCGCCTTCGTTAAGGACCAGACTGTGATCCAGAACACTGACGGCAACAACAATGAGGCTTGGGCCAAGAACCTCAAGAAAGAGAACTTCGAGGTCCTCTGCAAGGACGGAACTAGAAAGCCAGTTACTGACGCAGAGAACTGCCATCTTGCTAGGGGTCCAAATCACGCTGTGGTGTCTCGTAAGGATAAGGCTACTTGCGTCGAGAAGATCCTCAACAAGCAGCAGGATGATTTCGGCAAGTCCGTGACTGACTGCACCTCCAATTTCTGCCTCTTCCAGTCCAACAGCAAGGACTTGCTTTTCAGGGACGACACTAAGTGCCTCGCCTCCATTGCTAAGAAAACCTACGACTCCTACCTCGGCGACGATTATGTTAGGGCTATGACTAACCTCAGGCAGTGCTCTACTTCCAAGTTGCTTGAGGCTTGCACCTTTCACAAGCCTTGA".upper()
dict_target_gene['tobacco_FGF2'] = 'ATGGCAAGAAAGTCCCTCATATTCCCTGTGATACTCCTCGCAGTTTTGTTGTTTAGTCCACCAATCTACTCCGAGCTCCAGTTGAATCTTAAGGTGGAATTTTACAACTCCCAGCCATCTGATACTACAAATTCCATAAACCCTCAATTCAAGGTTACTAATACAGGATCTTCAGCTATCGATCTTTCAAAACTCACTCTTAGATACTACTACACAGTGGATGGTCAAAAGGATCAGACTTTTTGGTGTGACCATGCTGCAATTATAGGATCACAGGGTAGTTACAACGGAATAACTTCAAACGTTAAGGGTACATTCGTGAAAATGAGTTCCTCTACTAATAACGCTGATACATATCTCGAAATTTCTTTTACTGGAGGTACACTTGAGCCAGGTGCTCATGTTCAAATACAGGGAAGGTTCGCAAAAAATGATTGGTCACAGTACACTCAATCCAACGATTACTCTTTTAAGTCAGCTAGTCAATTCGTTGAATGGGATCAGGTGACAGCATATTTGAATGGTGTTTTAGTGTGGGGTAAAGAGCCTGGAGGTTCAGTTGTGCCAAGTACTCAACCTGTTACTACACCACCTGCTACTACAAAGCCACCTGCAACTACAATCCCACCTAGTGGTGCTGGTGGAGGCTCTGGTGGAGGCTCAGGTGGAGGCAGTGCAGGAGGTGGGGAGAACCTTTACTTCCAAGGTATGGCTGCTGGCTCCATCACTACTCTTCCATCTCTTCCAGAGGATGGTGGATCTGGTGCTTTTCCACCAGGACATTTCAAGGACCCAAAGAGGCTCTACTGCAAGAACGGTGGATTCTTCCTCAGGATTCACCCAGATGGTAGAGTGGATGGTGTGCGTGAAAAGTCCGATCCACACATTAAGCTCCAGCTCCAAGCTGAAGAGAGGGGCGTTGTATCTATTAAGGGCGTGTGCGCTAACCGTTACCTCGCCATGAAGGAAGATGGAAGGCTTCTCGCTTCTAAGTGCGTGACAGATGAGTGCTTCTTCTTCGAACGACTCGAATCCAACAACTACAACACCTACAGGTCCCGTAAGTACTCCTCTTGGTACGTGGCACTTAAGAGGACCGGACAGTATAAGCTCGGACCAAAGACTGGACCAGGACAGAAGGCTATTCTCTTCCTGCCAATGTCCGCCAAGTCCAAGGATGAGCTTTGA'.upper()
dict_target_gene['kompas_OVA'] = 'ATGGGCTCCATCGGTGCAGCAAGCATGGAATTTTGTTTTGATGTATTCAAGGAGCTCAAAGTCCACCATGCCAATGAGAACATCTTCTACTGCCCCATTGCCATCATGTCAGCTCTAGCCATGGTATACCTGGGTGCAAAAGACAGCACCAGGACACAAATAAATAAGGTTGTTCGCTTTGATAAACTTCCAGGATTCGGAGACAGTATTGAAGCTCAGTGTGGCACATCTGTAAACGTTCACTCTTCACTTAGAGACATCCTCAACCAAATCACCAAACCAAATGATGTTTATTCGTTCAGCCTTGCCAGTAGACTTTATGCTGAAGAGAGATACCCAATCCTGCCAGAATACTTGCAGTGTGTGAAGGAACTGTATAGAGGAGGCTTGGAACCTATCAACTTTCAAACAGCTGCAGATCAAGCCAGAGAGCTCATCAATTCCTGGGTAGAAAGTCAGACAAATGGAATTATCAGAAATGTCCTTCAGCCAAGCTCCGTGGATTCTCAAACTGCAATGGTTCTGGTTAATGCCATTGTCTTCAAAGGACTGTGGGAGAAAGCATTTAAGGATGAAGACACACAAGCAATGCCTTTCAGAGTGACTGAGCAAGAAAGCAAACCTGTGCAGATGATGTACCAGATTGGTTTATTTAGAGTGGCATCAATGGCTTCTGAGAAAATGAAGATCCTGGAGCTTCCATTTGCCAGTGGGACAATGAGCATGTTGGTGCTGTTGCCTGATGAAGTCTCAGGCCTTGAGCAGCTTGAGAGTATAATCAACTTTGAAAAACTGACTGAATGGACCAGTTCTAATGTTATGGAAGAGAGGAAGATCAAAGTGTACTTACCTCGCATGAAGATGGAGGAAAAATACAACCTCACATCTGTCTTAATGGCTATGGGCATTACTGACGTGTTTAGCTCTTCAGCCAATCTGTCTGGCATCTCCTCAGCAGAGAGCCTGAAGATATCTCAAGCTGTCCATGCAGCACATGCAGAAATCAATGAAGCAGGCAGAGAGGTGGTAGGGTCAGCAGAGGCTGGAGTGGATGCTGCAAGCGTCTCTGAAGAATTTAGGGCTGACCATCCATTCCTCTTCTGTATCAAGCACATCGCAACCAACGCCGTTCTCTTCTTTGGCAGATGTGTTTCCCCTTAA'

dict_target_gene['C1_HSA'] = 'ATGTACGCCAAGTTCGCGACCCTCGCCGCCCTTGTGGCTGGCGCCGCTGCTGACGCCCACAAGTCGGAGGTCGCCCACCGCTTCAAGGACCTCGGCGAGGAGAACTTCAAGGCCCTGGTCCTCATCGCCTTCGCCCAGTACCTCCAGCAGTGCCCCTTCGAGGACCACGTCAAGCTGGTCAACGAGGTCACCGAGTTCGCCAAGACCTGCGTCGCCGACGAGTCCGCCGAGAACTGCGACAAGTCCCTGCACACCCTCTTCGGCGACAAGCTGTGCACCGTCGCCACCCTCCGCGAGACCTACGGCGAGATGGCCGACTGCTGCGCCAAGCAGGAGCCGGAGCGCAACGAGTGCTTCCTCCAGCACAAGGACGACAACCCGAACCTGCCCCGCCTCGTCCGCCCCGAGGTCGACGTCATGTGCACCGCCTTCCACGACAACGAGGAGACCTTCCTCAAGAAGTACCTGTACGAGATCGCCCGCAGGCACCCCTACTTCTACGCCCCGGAGCTCCTGTTCTTCGCCAAGCGCTACAAGGCCGCCTTCACCGAGTGCTGCCAGGCCGCCGACAAGGCCGCCTGCCTGCTGCCGAAGCTCGACGAGCTGCGCGACGAGGGCAAGGCCAGCTCCGCCAAGCAGCGCCTCAAGTGCGCCAGCCTGCAGAAGTTCGGCGAGCGCGCCTTCAAGGCCTGGGCCGTCGCCCGCCTCTCCCAGCGCTTCCCCAAGGCCGAGTTCGCCGAGGTCTCCAAGCTCGTCACCGACCTGACCAAGGTCCACACCGAGTGCTGCCACGGCGACCTCCTGGAGTGCGCCGACGACCGCGCCGACCTCGCCAAGTACATCTGCGAGAACCAGGACTCCATCTCCAGCAAGCTGAAGGAGTGCTGCGAGAAGCCGCTCCTGGAGAAGAGCCACTGCATCGCCGAGGTCGAGAACGACGAGATGCCGGCCGACCTGCCCAGCCTGGCCGCCGACTTCGTCGAGTCGAAGGACGTCTGCAAGAACTACGCCGAGGCCAAGGACGTCTTCCTCGGCATGTTCCTGTACGAGTACGCCCGCAGGCACCCGGACTACTCCGTCGTCCTCCTGCTCCGCCTCGCCAAGACCTACGAGACCACCCTGGAGAAGTGCTGCGCTGCCGCCGACCCCCACGAGTGCTACGCCAAGGTCTTCGACGAGTTCAAGCCCCTCGTCGAGGAGCCGCAGAACCTGATCAAGCAGAACTGCGAGCTCTTCGAGCAGCTGGGCGAGTACAAGTTCCAGAACGCCCTGCTCGTCCGCTACACCAAGAAGGTCCCCCAGGTCTCCACCCCCACCCTGGTCGAGGTCAGCCGCAACCTGGGCAAGGTCGGCTCGAAGTGCTGCAAGCACCCGGAGGCCAAGCGCATGCCCTGCGCCGAGGACTACCTCAGCGTCGTCCTGAACCAGCTCTGCGTCCTGCACGAGAAGACCCCCGTCTCGGACCGCGTCACCAAGTGCTGCACCGAGTCCCTCGTCAACCGCAGGCCGTGCTTCTCGGCCCTGGAGGTCGACGAGACCTACGTCCCGAAGGAGTTCAACGCCGAGACCTTCACCTTCCACGCCGACATCTGCACCCTCTCGGAGAAGGAGCGCCAGATCAAGAAGCAGACCGCCCTCGTCGAGCTGGTCAAGCACAAGCCGAAGGCCACCAAGGAGCAGCTGAAGGCCGTCATGGACGACTTCGCCGCCTTCGTCGAGAAGTGCTGCAAGGCCGACGACAAGGAGACCTGCTTCGCCGAGGAAGGCAAGAAGCTCGTCGCCGCCTCCCAGGCCGCCCTGGGCCTCTAA'
dict_target_gene['C1_DNAse1'] = 'ATGTACGCCAAGTTCGCGACCCTCGCCGCCCTTGTGGCTGGCGCCGCTGCTCGCGGCACCCGCCTCATGGGCCTCCTGCTGGCCCTCGCCGGCCTCCTCCAGCTGGGCCTCTCGCTGAAGATCGCCGCCTTCAACATCCGCACCTTCGGCGAGACCAAGATGTCCAACGCCACCCTCGCCAGCTACATCGTCCGCATCGTCCGCAGGTACGACATCGTCCTCATCCAGGAAGTCCGCGACTCGCACCTGGTCGCCGTCGGCAAGCTGCTCGACTACCTCAACCAGGACGACCCCAACACCTACCACTACGTCGTCTCGGAGCCCCTGGGCCGCAACTCCTACAAGGAGCGCTACCTCTTCCTGTTCCGCCCCAACAAGGTCAGCGTCCTCGACACCTACCAGTACGACGACGGCTGCGAGTCGTGCGGCAACGACTCGTTCTCCCGCGAGCCGGCCGTCGTCAAGTTCAGCTCGCACTCCACCAAGGTCAAGGAGTTCGCCATCGTCGCCCTGCACTCGGCCCCCTCCGACGCCGTCGCCGAGATCAACAGCCTCTACGACGTCTACCTGGACGTCCAGCAGAAGTGGCACCTCAACGACGTCATGCTGATGGGCGACTTCAACGCCGACTGCAGCTACGTCACCTCCAGCCAGTGGTCGTCCATCCGCCTCCGCACCAGCTCGACCTTCCAGTGGCTCATCCCGGACTCGGCCGACACCACCGCCACCTCGACCAACTGCGCCTACGACCGCATCGTCGTCGCCGGCTCCCTGCTCCAGTCGTCGGTCGTCCCGGGCTCGGCCGCCCCGTTCGACTTCCAGGCCGCCTACGGCCTCTCCAACGAGATGGCCCTGGCCATCAGCGACCACTACCCGGTCGAGGTCACCCTCACCCACCACCACCACCACCACTAA'
dict_target_gene['C1_huFGF2'] = 'ATGTACGCCAAGTTCGCGACCCTCGCCGCCCTTGTGGCTGGCGCCGCTGCTATGCCGGCCCTCCCCGAGGACGGCGGCAGCGGCGCCTTCCCGCCCGGCCACTTCAAGGACCCCAAGCGCCTCTACTGCAAGAACGGCGGCTTCTTCCTCCGCATCCACCCCGACGGCCGCGTCGACGGCGTCCGCGAGAAGAGCGACCCCCACATCAAGCTCCAGCTGCAGGCCGAGGAGCGCGGCGTCGTCAGCATCAAGGGCGTCTGCGCCAACCGCTACCTCGCCATGAAGGAAGACGGCCGCCTCCTGGCCAGCAAGTGCGTCACCGACGAGTGCTTCTTCTTCGAGCGCCTCGAGTCGAACAACTACAACACCTACCGCAGCCGGAAGTACACCAGCTGGTACGTCGCCCTCAAGCGCACCGGCCAGTACAAGCTCGGCAGCAAGACCGGCCCCGGCCAGAAGGCCATCCTCTTCCTGCCCATGAGCGCCAAGTCGGAGCCCGAGGCCTAA'
dict_target_gene['C1_FGF21'] = 'ATGTACGCCAAGTTCGCGACCCTCGCCGCCCTTGTGGCTGGCGCCGCTGCTAAGACCCACACGTGCCCGCCGTGCCCGGCGCCGGAGGCCGCGGGCGCCCCGAGCGTGTTCCTGTTCCCGCCGAAGCCGAAGGACACCCTCATGATCTCGCGCACGCCCGAGGTCACGTGCGTCGTCGTCGACGTCAGCCACGAGGACCCCGAGGTGAAGTTCAACTGGTACGTCGACGGCGTCGAGGTCCACAACGCCAAGACCAAGCCGCGCGAGGAGCAGTACAACAGCACCTACCGCGTCGTCAGCGTCCTCACCGTCCTCCACCAGGACTGGCTCAACGGCAAGGAGTACAAGTGCAAGGTCAGCAACAAGGCCCTGCCGGCGCCGATCGAGAAGACCATCAGCAAGGCCAAGGGCCAGCCTCGCGAGCCCCAGGTCTACACCCTGCCGCCGAGCCGCGAGGAGATGACCAAGAACCAGGTCAGCCTCACGTGCCTGGTCAAGGGCTTCTACCCCAGCGACATCGCCGTCGAGTGGGAGAGCAACGGCCAGCCGGAGAACAACTACAAGACGACCCCGCCGGTCCTCGACAGCGACGGCTCGTTCTTCCTGTACAGCAAGCTCACCGTCGACAAGAGCCGCTGGCAGCAGGGCAACGTGTTCAGCTGCAGCGTCATGCACGAGGCCCTCCACAACCACTACACCCAGAAGTCGCTCTCGCTCAGCCCGGGCGGCGGCGGCGGCGGCGGCGGCGGCCACCCGATCCCGGACAGCAGCCCGCTCCTCCAGTTCGGCGGCCAGGTCCGGCAGGTCTACCTCTACACCGACGACGCCCAGCAGACCGAGGCGCACCTCGAGATCCGCGAGGACGGCACCGTCGGCGGCGCCGCGGACCAGTCGCCGGAGAGCCTCCTCCAGCTCAAGGCCCTCAAGCCGGGCGTCATCCAGATCCTCGGCGTCAAGACCTCGCGCTTCCTCTGCCAGAGGCCGGACGGCGCCCTCTACGGCAGCCTCCACTTCGACCCCGAGGCCTGCAGCTTCCGCGAGCTGCTGCTCGAGGACGGCTACAACGTCTACCAGAGCGAGGCCCACGGCCTGCCGCTCCACCTCCCGGGCAACAAGTCGCCCCACAGGGACCCCGCGCCGCGCGGCCCGGCCAGGTTCCTGCCGCTGCCGGGCCTGCCGCCGGCGCTCCCCGAGCCGCCGGGCATCCTCGCGCCGCAGCCGCCGGACGTCGGCAGCAGCGACCCGCTCAGCATGGTCGGCAACAGCACGGGCCGCTCGCCGAGCTACGCCAGCTAA'


dict_target_gene['aspory_BLG'] = 'ATGAAGTTTTTCGCCATTGCCGCCCTATTTGCCGCCGCTGCCGTTGCCCAGCCTAACGTCATCTCGAAGCGGCTCATCGTCACCCAGACCATGAAGGGCCTCGACATCCAGAAGGTCGCCGGCACCTGGTACAGCCTCGCCATGGCCGCCAGCGACATCAGCCTGCTCGACGCCCAGAGCGCCCCTCTCCGCGTCTACGTCGAGGAGCTGAAGCCCACGCCTGAGGGCGACCTCGAGATCCTCCTGCAGAAGTGGGAGAACGGCGAGTGCGCCCAGAAGAAGATCATTGCCGAGAAGACGAAGATCCCCGCCGTGTTCAAGATCGACGCCCTCAACGAGAACAAGGTCCTCGTCCTCGACACCGACTACAAGAAGTACCTCCTGTTCTGCATGGAGAACTCCGCCGAGCCTGAGCAGAGCCTCGCCTGCCAGTGCCTCGTTCGCACGCCCGAGGTCGACGACGAGGCCCTCGAGAAGTTCGACAAGGCCCTCAAGGCTCTCCCCATGCACATCCGCCTCAGCTTCAACCCCACGCAGCTCGAGGAGCAGTGCCACATCTGA'

dict_target_gene['ecoli_CDA2D'] = 'ATGCAGGTGCAGCTGCAGGAGTCTGGGGGAGGATTGGTGCAGGCCGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCTGGGCGCGCCTTCAGTAGGTATGGCATGGCCTGGTTCCGCCAGGCTCCAGGAAAGGAGCGTGAATTTGTAGGAGCTATTAATTCGAATGGTAGAAGTACATACTATGCAGACACCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGACAGGAACACGCTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCAGCCGACAGACAAAGTATGACGCGCTATGAGTATGGTTACTGGGGCCAGGGGACCCAGGTCACCGTCTCCTCAGCGGCCGCATACCCGTACGACGTTCCGGACTACGGTTCCCACCACCATCACCATCACTAG'


# dict_host_gene_id = {'subtilis_TGFB1': ['BSU_01280', 'BSU_08230'],
#                      'kompas_FGF2': ['PAS_chr1-1_0107', 'PAS_chr3_1048'],
#                      'tobacco_FGF2': ['LOC107794898', 'LOC107767559'],
#                      'tobacco_mTF': ['LOC107794898', 'LOC107817046'],
#                      'tobacco_SCI': ['LOC107781188', 'LOC107815372']}
#
# dict_host_gene_id = {'kompas_OVA': ['PAS_chr2-2_0326', 'PAS_chr1-3_0115', 'PAS_chr2-1_0437']}

# dict_host_gene_id = {'C1_HSA': ['CDS02726-1', 'CDS02638-1'],
#                      'C1_DNAse1': ['CDS04245-1', 'CDS05855-1'],
#                      'C1_huFGF2': ['CDS01761-1', 'CDS00878-1'],
#                      'C1_FGF21': ['CDS07060-1', 'CDS04245-1']}

# dict_host_gene_id = {'aspory_BLG': ['AO090003000422', 'AO090120000131', 'AO090701000167', 'AO090010000541', 'AO090023000401']}
# list_targets = ['subtilis_TGFB1', 'kompas_FGF2', 'tobacco_SCI', 'tobacco_mTF', 'tobacco_FGF2']
# list_targets = ['C1_HSA', 'C1_DNAse1', 'C1_huFGF2', 'C1_FGF21']

dict_host_gene_id = {'ecoli_CDA2D': ['b0605', 'b4143', 'b1779']}
list_targets = ['ecoli_CDA2D']

path_linkers = 'In/utils/linkers.csv'
output_path = 'data/predictions_linkers/linkers_ecoli_CDA2D.csv'

ii =0
list_outputs = []
try:
    list_outputs = [pd.read_csv(output_path)]
    ii = list_outputs[0].shape[0]
except:
    pass


list_outputs = []

for target in list_targets:
    host = target.split('_')[0]
    genome_path = f'feature_repo_{host}/Data/escCol_genome.csv'
    tai_path = f'feature_repo_{host}/Data/tAI.csv'
    for gene_id in dict_host_gene_id[target]:
        if ii>0:
            ii-=1
            print(f'already did {target}_{gene_id}')
            continue
        curr_linkers = single_calc(target, gene_id, genome_path, dict_target_gene[target], path_linkers, tai_path)
        list_outputs.append(curr_linkers)
        df_linkers = pd.concat(list_outputs)
        df_linkers.to_csv(output_path)




